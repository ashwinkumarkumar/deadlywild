import tensorflow as tf
import keras
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
%matplotlib inline
import numpy as np

(X_train, y_train), (X_test, y_test)=datasets.cifar10.load_data()
X_train.shape, X_test.shape

classes=["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

y_train=y_train.reshape(-1,)
y_train

def plot_sample(X, y,index):
  plt.figure(figsize=(15,2))
  plt.imshow(X[index])
  plt.xlabel(classes[y[index]])

plot_sample(X_train, y_train, 1)

#Normalisation
X_train=X_train/255
X_test=X_test/255

cnn=models.Sequential([
    #cnn
    layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    #dense
    layers.Flatten(),
    layers.Dense(50, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=5)

y_pred=cnn.predict(X_test)
y_classes=[np.argmax(element) for element in y_pred]

y_test=y_test.reshape(-1,)

print("Calculated Class:",classes[y_classes[1]])
print("Test Dataset Label:")
plot_sample(X_test, y_test, 1)

from sklearn.metrics import confusion_matrix, classification_report
print("Classification Report: \n",classification_report(y_test, y_classes))

