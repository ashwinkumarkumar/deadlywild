#MAdaline neural network
import numpy as np

def activation_fn(z):
	if z>=0:
		return 1
	else:
		return -1

def Madaline(Input, Target, lr, epoch):
	weight = np.random.random((Input.shape[1],Input.shape[1]))
	bias = np.random.random(Input.shape[1])

	w = np.array([0.5 for i in range(weight.shape[1])])
	b = 0.5
	k = 0
	while k<epoch:
		error = []
		z_input = np.zeros(bias.shape[0])
		z = np.zeros(bias.shape[0])
		for i in range(Input.shape[0]):
			for j in range(Input.shape[1]):
				z_input[j] = sum(weight[j]*Input[i]) + bias[j]
				z[j]= activation_fn(z_input[j])

			y_input = sum(z*w) +b

			y = activation_fn(y_input)
			# Update the weight & bias
			if y != Target[i]:
				for j in range(weight.shape[1]):
					weight[j]= weight[j] + lr*(Target[i]-z_input[j])*Input[i][j]
					bias[j] = bias[j] + lr*(Target[i]-z_input[j])

			# Store squared error value
			error.append((Target[i]-z_input)**2)
		# compute sum of square error
		Error = sum(error)
		k+=1

	return weight, bias,Error

# Input dataset
x = np.array([[1.0, 1.0, 1.0], [1.0, -1.0, 1.0],
			[-1.0, 1.0, 1.0], [-1.0, -1.0, -1.0]])
# Target values
t = np.array([1, 1, 1, -1])
print(f"Input:\n{x}")
print(f"Output: {t}")
w,b,error = Madaline(x, t, 0.0001, 3)
print('\nweight :\n',w)
print('Bias :',b)
print('Error :',error)
def prediction(X, w,b):
    y =[]
    for i in range(X.shape[0]):
        x = X[i]
        z1 = x*w
        z_1 =[]
        for j in range(z1.shape[1]):
            z_1.append(activation_fn(sum(z1[j])+b[j]))
        y_in = sum(np.array(z_1)*np.array([0.5 for j in range(w.shape[1])])) + 0.5
        y.append(activation_fn(y_in))
    return y
print("\nPredicted Output:")
print(prediction(x, w,b))